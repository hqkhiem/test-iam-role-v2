# This is a basic workflow to help you get started with Actions
name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1 #Change to reflect your Region

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  AssumeRoleAndCallIdentity:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::828534629849:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      # Hello from AWS: WhoAmI
      - name: Show all buckets
        run: |
          aws s3 ls

      # - name: Start Flink application
      #   run: |
      #     APP_STATE=$(aws kinesisanalyticsv2 describe-application --application-name MyApplication --region us-east-1 --query 'ApplicationDetail.ApplicationStatus' --output text)
      #     if [[ "$APP_STATE" == "READY" ]]; then
      #       echo "Application is ready. Starting the application..."
      #       aws kinesisanalyticsv2 start-application --application-name MyApplication --region us-east-1
      #     else
      #       echo "Application is not ready yet. Current state: $APP_STATE"
      #     fi
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'
          cache: maven
      - name: Build and test project with Maven
        run: mvn package -Dflink.version=1.15.3 -Dskiptests

      - name: Upload artifact to S3
        run: |
          ls '${{ github.workspace }}/${{ env.APP_NAME }}/target'
          aws s3 cp '${{ github.workspace }}/${{ env.APP_NAME }}/target/aws-kinesis-analytics-java-apps-1.0.jar' s3://dhp-data-platform-test/flink-job/aws-kinesis-analytics-java-apps-1.0.jar
          object_version=$(aws s3api list-object-versions --bucket dhp-data-platform-test --prefix flink-job/aws-kinesis-analytics-java-apps-1.0.jar --query 'Versions[0].VersionId' --output text)
          echo "Current version: $object_version"
          echo "OBJECT_VERSION=${object_version}" >> $GITHUB_ENV

      - name: Use Version ID
        run: |
          echo "Version ID: ${{ env.OBJECT_VERSION }}"
          bucket_arn=$(aws s3api get-bucket-location --bucket dhp-data-platform-test --query 'LocationConstraint' --output text)
          echo '[
            {
              "ParameterKey": "CodeContentBucketArn",
              "ParameterValue": "${bucket_arn}"
            },
            {
              "ParameterKey": "CodeContentFileKey",
              "ParameterValue": "flink-job/aws-kinesis-analytics-java-apps-1.0.jar"
            },,
            {
              "ParameterKey": "CodeContentFileVersion",
              "ParameterValue": "${{ env.OBJECT_VERSION }}"
            },
            {
              "ParameterKey": "ApplicationRestoreType",
              "ParameterValue": "SKIP_RESTORE_FROM_SNAPSHOT"
            },
            {
              "ParameterKey": "AllowNonRestoredState",
              "ParameterValue": "true"
            }
          ]' > parameters.json
          cat parameters.json
